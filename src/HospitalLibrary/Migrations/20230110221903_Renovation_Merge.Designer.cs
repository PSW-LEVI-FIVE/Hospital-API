// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20230110221903_Renovation_Merge")]
    partial class Renovation_Merge
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenMedicine", b =>
                {
                    b.Property<int>("AllergensId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicinesId")
                        .HasColumnType("integer");

                    b.HasKey("AllergensId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("AllergenMedicine");
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<int>("AllergensId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientsId")
                        .HasColumnType("integer");

                    b.HasKey("AllergensId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("ExaminationReportSymptom", b =>
                {
                    b.Property<int>("ExaminationReportsId")
                        .HasColumnType("integer");

                    b.Property<int>("SymptomsId")
                        .HasColumnType("integer");

                    b.HasKey("ExaminationReportsId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("ExaminationReportSymptom");
                });

            modelBuilder.Entity("HospitalLibrary.Advertisement.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Advertisement");
                });

            modelBuilder.Entity("HospitalLibrary.Allergens.Allergen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");
                });

            modelBuilder.Entity("HospitalLibrary.AnnualLeaves.AnnualLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("AnnualLeaves");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ConsiliumId")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConsiliumId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HospitalLibrary.BloodOrders.BloodOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("BloodOrders");
                });

            modelBuilder.Entity("HospitalLibrary.BloodStorages.BloodStorage", b =>
                {
                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.HasKey("BloodType");

                    b.ToTable("BloodStorage");
                });

            modelBuilder.Entity("HospitalLibrary.Buildings.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Consilium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("Consilium");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("HospitalLibrary.Examination.ExaminationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("ExaminationId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationReports");
                });

            modelBuilder.Entity("HospitalLibrary.Examination.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Dose")
                        .HasColumnType("text");

                    b.Property<int>("ExaminationReportId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationReportId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FeedbackContent")
                        .HasColumnType("text");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HospitalLibrary.Floors.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Hospitalizations.Hospitalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BedId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("integer");

                    b.Property<string>("PdfUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BedId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Hospitalizations");
                });

            modelBuilder.Entity("HospitalLibrary.Infrastructure.EventSourcing.DomainEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AggregateId")
                        .HasColumnType("integer");

                    b.Property<int?>("ExaminationReportId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationReportId");

                    b.ToTable("DomainEvent");
                });

            modelBuilder.Entity("HospitalLibrary.Map.MapBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<string>("RgbColour")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("MapBuildings");
                });

            modelBuilder.Entity("HospitalLibrary.Map.MapFloor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FloorId")
                        .HasColumnType("integer");

                    b.Property<int>("MapBuildingId")
                        .HasColumnType("integer");

                    b.Property<string>("RgbColour")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("MapBuildingId");

                    b.ToTable("MapFloors");
                });

            modelBuilder.Entity("HospitalLibrary.Map.MapRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MapFloorId")
                        .HasColumnType("integer");

                    b.Property<string>("RbgColour")
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MapFloorId");

                    b.HasIndex("RoomId");

                    b.ToTable("MapRooms");
                });

            modelBuilder.Entity("HospitalLibrary.MedicalRecords.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.Renovations.Model.Renovation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MainRoomId")
                        .HasColumnType("integer");

                    b.Property<string>("SecondaryRoomIds")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("roomName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MainRoomId");

                    b.ToTable("Renovations");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.EquipmentReallocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DestinationRoomId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StartingRoomId")
                        .HasColumnType("integer");

                    b.Property<int>("amount")
                        .HasColumnType("integer");

                    b.Property<int>("state")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRoomId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("StartingRoomId");

                    b.ToTable("EquipmentReallocations");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FloorId")
                        .HasColumnType("integer");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("text");

                    b.Property<int>("RoomType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");
                });

            modelBuilder.Entity("HospitalLibrary.Shared.Model.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("HospitalLibrary.Shared.Model.WorkingHours", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("interval");

                    b.HasKey("DoctorId", "Day");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("HospitalLibrary.Symptoms.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("HospitalLibrary.Therapies.Model.Therapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GivenAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HospitalizationId")
                        .HasColumnType("integer");

                    b.Property<string>("InstanceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalizationId");

                    b.ToTable("Therapies");

                    b.HasDiscriminator<string>("InstanceType").HasValue("Therapy");
                });

            modelBuilder.Entity("HospitalLibrary.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("text");

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("Blocked")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActivationCode")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HospitalLibrary.Infrastructure.EventSourcing.Events.ExaminationReportDomainEvent", b =>
                {
                    b.HasBaseType("HospitalLibrary.Infrastructure.EventSourcing.DomainEvent");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.ToTable("ExaminationReportDomainEvents");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Bed", b =>
                {
                    b.HasBaseType("HospitalLibrary.Rooms.Model.RoomEquipment");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.Shared.Model.Person");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("integer");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.Shared.Model.Person");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<int?>("ChoosenDoctorId")
                        .HasColumnType("integer");

                    b.HasIndex("ChoosenDoctorId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Therapies.Model.BloodTherapy", b =>
                {
                    b.HasBaseType("HospitalLibrary.Therapies.Model.Therapy");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("BloodTherapy_Quantity");

                    b.HasDiscriminator().HasValue("blood");
                });

            modelBuilder.Entity("HospitalLibrary.Therapies.Model.MedicineTherapy", b =>
                {
                    b.HasBaseType("HospitalLibrary.Therapies.Model.Therapy");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.HasIndex("MedicineId");

                    b.HasDiscriminator().HasValue("medicine");
                });

            modelBuilder.Entity("AllergenMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.Allergens.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.Allergens.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationReportSymptom", b =>
                {
                    b.HasOne("HospitalLibrary.Examination.ExaminationReport", null)
                        .WithMany()
                        .HasForeignKey("ExaminationReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Symptoms.Symptom", null)
                        .WithMany()
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.AnnualLeaves.AnnualLeave", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.Reason", "Reason", b1 =>
                        {
                            b1.Property<int>("AnnualLeaveId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Text")
                                .HasColumnType("text");

                            b1.HasKey("AnnualLeaveId");

                            b1.ToTable("AnnualLeaves");

                            b1.WithOwner()
                                .HasForeignKey("AnnualLeaveId");
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Consiliums.Consilium", "Consilium")
                        .WithMany()
                        .HasForeignKey("ConsiliumId");

                    b.HasOne("HospitalLibrary.Doctors.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consilium");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.BloodOrders.BloodOrder", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<int>("BloodOrderId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<double>("Count")
                                .HasColumnType("double precision");

                            b1.HasKey("BloodOrderId");

                            b1.ToTable("BloodOrders");

                            b1.WithOwner()
                                .HasForeignKey("BloodOrderId");
                        });

                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.Reason", "Reason", b1 =>
                        {
                            b1.Property<int>("BloodOrderId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Text")
                                .HasColumnType("text");

                            b1.HasKey("BloodOrderId");

                            b1.ToTable("BloodOrders");

                            b1.WithOwner()
                                .HasForeignKey("BloodOrderId");
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Quantity");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Consilium", b =>
                {
                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<int>("ConsiliumId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("TitleString")
                                .HasColumnType("text");

                            b1.HasKey("ConsiliumId");

                            b1.ToTable("Consilium");

                            b1.WithOwner()
                                .HasForeignKey("ConsiliumId");
                        });

                    b.Navigation("Title");
                });

            modelBuilder.Entity("HospitalLibrary.Examination.ExaminationReport", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Appointments.Appointment", "Examination")
                        .WithMany()
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("HospitalLibrary.Examination.Prescription", b =>
                {
                    b.HasOne("HospitalLibrary.Examination.ExaminationReport", "ExaminationReport")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ExaminationReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExaminationReport");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Feedbacks.ValueObjects.FeedbackStatus", "FeedbackStatus", b1 =>
                        {
                            b1.Property<int>("FeedbackId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<bool>("AllowPublishment")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Anonimity")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Published")
                                .HasColumnType("boolean");

                            b1.HasKey("FeedbackId");

                            b1.ToTable("Feedbacks");

                            b1.WithOwner()
                                .HasForeignKey("FeedbackId");
                        });

                    b.Navigation("FeedbackStatus");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Floors.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Buildings.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.Area", "Area", b1 =>
                        {
                            b1.Property<int>("FloorId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<float>("Measure")
                                .HasColumnType("real");

                            b1.HasKey("FloorId");

                            b1.ToTable("Floors");

                            b1.WithOwner()
                                .HasForeignKey("FloorId");
                        });

                    b.Navigation("Area");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Hospitalizations.Hospitalization", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Bed", "Bed")
                        .WithMany("AllHospitalizations")
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.MedicalRecords.MedicalRecord", "MedicalRecord")
                        .WithMany("Hospitalizations")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HospitalLibrary.Infrastructure.EventSourcing.DomainEvent", b =>
                {
                    b.HasOne("HospitalLibrary.Examination.ExaminationReport", null)
                        .WithMany("Changes")
                        .HasForeignKey("ExaminationReportId");
                });

            modelBuilder.Entity("HospitalLibrary.Map.MapBuilding", b =>
                {
                    b.HasOne("HospitalLibrary.Buildings.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<int>("MapBuildingId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<float>("Height")
                                .HasColumnType("real");

                            b1.Property<float>("Width")
                                .HasColumnType("real");

                            b1.Property<float>("XCoordinate")
                                .HasColumnType("real");

                            b1.Property<float>("YCoordinate")
                                .HasColumnType("real");

                            b1.HasKey("MapBuildingId");

                            b1.ToTable("MapBuildings");

                            b1.WithOwner()
                                .HasForeignKey("MapBuildingId");
                        });

                    b.Navigation("Building");

                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("HospitalLibrary.Map.MapFloor", b =>
                {
                    b.HasOne("HospitalLibrary.Floors.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Map.MapBuilding", "MapBuilding")
                        .WithMany()
                        .HasForeignKey("MapBuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<int>("MapFloorId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<float>("Height")
                                .HasColumnType("real");

                            b1.Property<float>("Width")
                                .HasColumnType("real");

                            b1.Property<float>("XCoordinate")
                                .HasColumnType("real");

                            b1.Property<float>("YCoordinate")
                                .HasColumnType("real");

                            b1.HasKey("MapFloorId");

                            b1.ToTable("MapFloors");

                            b1.WithOwner()
                                .HasForeignKey("MapFloorId");
                        });

                    b.Navigation("Coordinates");

                    b.Navigation("Floor");

                    b.Navigation("MapBuilding");
                });

            modelBuilder.Entity("HospitalLibrary.Map.MapRoom", b =>
                {
                    b.HasOne("HospitalLibrary.Map.MapFloor", "MapFloor")
                        .WithMany("MapRooms")
                        .HasForeignKey("MapFloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<int>("MapRoomId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<float>("Height")
                                .HasColumnType("real");

                            b1.Property<float>("Width")
                                .HasColumnType("real");

                            b1.Property<float>("XCoordinate")
                                .HasColumnType("real");

                            b1.Property<float>("YCoordinate")
                                .HasColumnType("real");

                            b1.HasKey("MapRoomId");

                            b1.ToTable("MapRooms");

                            b1.WithOwner()
                                .HasForeignKey("MapRoomId");
                        });

                    b.Navigation("Coordinates");

                    b.Navigation("MapFloor");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.MedicalRecords.MedicalRecord", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Medicine", b =>
                {
                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<int>("MedicineId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("NameString")
                                .HasColumnType("text");

                            b1.HasKey("MedicineId");

                            b1.ToTable("Medicines");

                            b1.WithOwner()
                                .HasForeignKey("MedicineId");
                        });

                    b.Navigation("Name");
                });

            modelBuilder.Entity("HospitalLibrary.Renovations.Model.Renovation", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "MainRoom")
                        .WithMany()
                        .HasForeignKey("MainRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.EquipmentReallocation", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "DestinationRoom")
                        .WithMany()
                        .HasForeignKey("DestinationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomEquipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "StartingRoom")
                        .WithMany()
                        .HasForeignKey("StartingRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationRoom");

                    b.Navigation("Equipment");

                    b.Navigation("StartingRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Floors.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.Area", "Area", b1 =>
                        {
                            b1.Property<int>("RoomId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<float>("Measure")
                                .HasColumnType("real");

                            b1.HasKey("RoomId");

                            b1.ToTable("Rooms");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.Navigation("Area");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("RoomEquipment")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Shared.Model.Person", b =>
                {
                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .HasColumnType("text");

                            b1.Property<string>("StreetNumber")
                                .HasColumnType("text");

                            b1.HasKey("PersonId");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("CellNumber")
                                .HasColumnType("text");

                            b1.HasKey("PersonId");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Address");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("HospitalLibrary.Shared.Model.WorkingHours", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Doctor", "Doctor")
                        .WithMany("WorkingHours")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Therapies.Model.Therapy", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Hospitalizations.Hospitalization", "Hospitalization")
                        .WithMany("Therapies")
                        .HasForeignKey("HospitalizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Hospitalization");
                });

            modelBuilder.Entity("HospitalLibrary.Users.User", b =>
                {
                    b.HasOne("HospitalLibrary.Shared.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Shared.Model.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<string>("PasswordString")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Password");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HospitalLibrary.Infrastructure.EventSourcing.Events.ExaminationReportDomainEvent", b =>
                {
                    b.HasOne("HospitalLibrary.Infrastructure.EventSourcing.DomainEvent", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Infrastructure.EventSourcing.Events.ExaminationReportDomainEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Bed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.RoomEquipment", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Rooms.Model.Bed", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.Shared.Model.Person", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Doctor", "ChoosenDoctor")
                        .WithMany("Patients")
                        .HasForeignKey("ChoosenDoctorId");

                    b.HasOne("HospitalLibrary.Shared.Model.Person", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChoosenDoctor");
                });

            modelBuilder.Entity("HospitalLibrary.Therapies.Model.MedicineTherapy", b =>
                {
                    b.HasOne("HospitalLibrary.Medicines.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Buildings.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Examination.ExaminationReport", b =>
                {
                    b.Navigation("Changes");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Floors.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Hospitalizations.Hospitalization", b =>
                {
                    b.Navigation("Therapies");
                });

            modelBuilder.Entity("HospitalLibrary.Map.MapFloor", b =>
                {
                    b.Navigation("MapRooms");
                });

            modelBuilder.Entity("HospitalLibrary.MedicalRecords.MedicalRecord", b =>
                {
                    b.Navigation("Hospitalizations");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("RoomEquipment");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Bed", b =>
                {
                    b.Navigation("AllHospitalizations");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Patients");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
